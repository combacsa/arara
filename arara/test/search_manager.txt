# load Search Manager

>>> import arara.model
>>> arara.model.init_test_database()
>>> import arara
>>> server = arara.get_namespace()

# To test search manager, we have to write some article to the board.
# So, let's copy some of the test module from the article_manager.txt
####################################### QUOTE ############################################
# Login as SYSOP and create 'garbage', 'KAIST' board

>>> ret, session_key_sysop = server.login_manager.login(u'SYSOP', u'SYSOP', u'123.123.123.123')
>>> ret
True

>>> server.board_manager.add_board(unicode(session_key_sysop), u'garbages', u'Garbage Board')
(True, 'OK')
>>> server.board_manager.add_board(unicode(session_key_sysop), u'KAIST', u'The KAIST Board')
(True, 'OK')

# Register one user, combacsa.

>>> user_reg_dic = {'username':u'combacsa', 'password':u'combacsa', 'nickname':u'combacsa', 'email':u'combacsa', 'signature':u'combacsa', 'self_introduction':u'combacsa', 'default_language':u'english' }
>>> ret, register_key = server.member_manager.register(user_reg_dic)
>>> ret
True
>>> server.member_manager.confirm(u'combacsa', unicode(register_key))
(True, 'OK')
>>> ret, session_key_combacsa = server.login_manager.login(u'combacsa', u'combacsa', u'143.248.234.140')
>>> ret
True

# Register one user, mikkang

>>> user_reg_dic = {'username':u'mikkang', 'password':u'mikkang', 'nickname':u'mikkang', 'email':u'mikkang', 'signature':u'mikkang', 'self_introduction':u'mikkang', 'default_language':u'english' }
>>> ret, register_key = server.member_manager.register(user_reg_dic)
>>> ret
True
>>> server.member_manager.confirm(u'mikkang', unicode(register_key))
(True, 'OK')
>>> ret, session_key = server.login_manager.login(u'mikkang', u'mikkang', u'143.248.234.140')
>>> ret
True

# Register one user, serialx

>>> user_reg_dic = {'username':u'serialx', 'password':u'serialx', 'nickname':u'serialx', 'email':u'serialx', 'signature':u'serialx', 'self_introduction':u'serialx', 'default_language':u'english' }
>>> ret, register_key = server.member_manager.register(user_reg_dic)
>>> ret
True
>>> server.member_manager.confirm(u'serialx', unicode(register_key))
(True, 'OK')
>>> ret, session_key_serialx = server.login_manager.login(u'serialx', u'serialx', u'143.248.234.140')
>>> ret
True

# Faking time.time (to check time field)

>>> import time
>>> def stub_time():
...     return 1.1
>>> org_time = time.time
>>> time.time = stub_time

# now Testing Article Manager!

>>> server.board_manager.get_board_list()
(True, [{'read_only': False, 'board_name': u'garbages', 'board_description': u'Garbage Board'}, {'read_only': False, 'board_name': u'KAIST', 'board_description': u'The KAIST Board'}])

# Write an article on garbage board

>>> article_dic = {'title': u'serialx is...', 'content': u'black polarbear'}
>>> server.article_manager.write_article(session_key, u'garbages', article_dic)
(True, 1)

# Read the article

>>> server.article_manager.read(session_key, u'garbages', 1)
(True, [{'author_username': u'mikkang', 'hit': 1, 'blacklisted': False, 'root_id': 1, 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'is_searchable': True, 'author_nickname': u'mikkang', 'content': u'black polarbear', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'title': u'serialx is...', 'id': 1}])

# Reply to the article

>>> reply_dic = {'title':u'dummy', 'content': u'asdf'}
>>> server.article_manager.write_reply(session_key, u'garbages', 24, reply_dic)
(False, 'ARTICLE_NOT_EXIST')
>>> server.article_manager.write_reply(session_key, u'garbages', 1, reply_dic)
(True, 2)

# Read the article again

>>> server.article_manager.read(session_key, u'garbages', 1)
(True, [{'author_username': u'mikkang', 'hit': 1, 'blacklisted': False, 'root_id': 1, 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'is_searchable': True, 'author_nickname': u'mikkang', 'content': u'black polarbear', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'title': u'serialx is...', 'id': 1}, {'author_username': u'mikkang', 'hit': 0, 'blacklisted': False, 'root_id': 1, 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'is_searchable': True, 'author_nickname': u'mikkang', 'content': u'asdf', 'vote': 0, 'depth': 2, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'title': u'dummy', 'id': 2}])

# List the article (should only be one article in the list

>>> server.article_manager.article_list(session_key, u'garbages')
(True, {'last_page': 1, 'hit': [{'author_username': u'mikkang', 'hit': 1, 'title': u'serialx is...', 'deleted': False, 'read_status': 'R', 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 1, 'vote': 0, 'type': 'normal', 'id': 1}], 'results': 1})

# Test for pagination with mikkang session_key

>>> for i in range(100):
...     article_dic = {u'title': u'serialx is... ' + unicode(i), u'content': u'polarbear'}
...     _ = server.article_manager.write_article(session_key, u'garbages', article_dic)

# Test for pagination with combacsa session_key
>>> for i in range(100):
...     article_dic = {u'title': u'serialx is... ' + unicode(i), u'content': u'polarbear'}
...     _ = server.article_manager.write_article(session_key_combacsa, u'garbages', article_dic)

# Write an article on KAIST board
>>> article_dic = {'title': u'serialx is...', 'content': u'black polarbear'}
>>> server.article_manager.write_article(session_key, u'KAIST', article_dic)
(True, 203)

##################################### END QUOTE ##########################################

# Now testing search_manager

# Registering dummy article to the K-Search is not appropriate.
#>>> server.search_manager.register_article()

# Search article with title
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx'}, 1, 2)
(True, {'last_page': 101, 'search_time': '0.0', 'hit': [{'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 202}, {'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 201}], 'results': 201})

# Search article with title AND EXACT author_username
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_username': u'mikkang'}, 1, 2)
(True, {'last_page': 51, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 102}, {'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 101}], 'results': 101})

>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_username': u'combacsa'}, 1, 2)
(True, {'last_page': 50, 'search_time': '0.0', 'hit': [{'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 202}, {'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 201}], 'results': 100})

# Search article with title AND AMBIGUOUS author_username
# Result should be same with above two tests.
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_username': u'ikka'}, 1, 2)
(True, {'last_page': 51, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 102}, {'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 101}], 'results': 101})
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_username': u'omb'}, 1, 2)
(True, {'last_page': 50, 'search_time': '0.0', 'hit': [{'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 202}, {'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 201}], 'results': 100})

# Search article with title AND EXACT author_nickname
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_username': u'mikkang'}, 1, 2)
(True, {'last_page': 51, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 102}, {'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 101}], 'results': 101})
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_username': u'combacsa'}, 1, 2)
(True, {'last_page': 50, 'search_time': '0.0', 'hit': [{'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 202}, {'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 201}], 'results': 100})

# Search article with title AND AMBIGUOUS author_nickname
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_nickname': u'ikka'}, 1, 2)
(True, {'last_page': 51, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 102}, {'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 101}], 'results': 101})
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_nickname': u'omb'}, 1, 2)
(True, {'last_page': 50, 'search_time': '0.0', 'hit': [{'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 202}, {'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 201}], 'results': 100})

# Search article with title AND EXACT content
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'content': u'black'}, 1, 20)
(True, {'last_page': 1, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 1, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'black polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 1, 'vote': 0, 'id': 1}], 'results': 1})

# Search article with title AND AMBIGUOUS content
# Result should be same with above one test.
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'content': u'lac'}, 1, 20)
(True, {'last_page': 1, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 1, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'black polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 1, 'vote': 0, 'id': 1}], 'results': 1})

# Search article with EXACT title AND AMBIGUOUS content AND AMBIGUOUS author_username
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'content': u'lac', u'author_username': u'mikk'}, 1, 20)
(True, {'last_page': 1, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 1, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'black polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 1, 'vote': 0, 'id': 1}], 'results': 1})

# Search article with the same method above but this should return empty result
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'content': u'lac', u'author_username': u'bacsa'}, 1, 20)
(True, {'last_page': 1, 'search_time': '0.0', 'hit': [], 'results': 0})

# Now search the article with NOT EXISTING USERNAME
# This should return empty result, NOT exception or False.
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_username': u'ideal_society'}, 1, 20)
(True, {'last_page': 1, 'search_time': '0.0', 'hit': [], 'results': 0})


# Now search the article with NOT EXISTING NICKNAME
# This should return empty result, NOT exception or False.
>>> server.search_manager.search(session_key, False, u'garbages', {u'title': u'serialx', u'author_nickname': u'ideal_society'}, 1, 20)
(True, {'last_page': 1, 'search_time': '0.0', 'hit': [], 'results': 0})

# Now search the article with all_flag ON WITH BOARD_NAME
>>> server.search_manager.search(session_key, True, u'garbages', {u'query': u'serialx'}, 1, 2)
(True, {'last_page': 101, 'search_time': '0.0', 'hit': [{'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 202}, {'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 98', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 201}], 'results': 201})
>>> server.search_manager.search(session_key, True, u'KAIST', {u'query': u'serialx'}, 1, 2)
(True, {'last_page': 1, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'black polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 203}], 'results': 1})

# Now search the article with all_flag OFF WITHOUT BOARD_NAME
>>> server.search_manager.search(session_key, True, u'no_board', {u'query': u'serialx'}, 1, 2)
(True, {'last_page': 101, 'search_time': '0.0', 'hit': [{'author_username': u'mikkang', 'hit': 0, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'mikkang', 'content': u'black polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 203}, {'author_username': u'combacsa', 'hit': 0, 'title': u'serialx is... 99', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'author_nickname': u'combacsa', 'content': u'polarbear', 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 0, 'vote': 0, 'id': 202}], 'results': 202})

# Restore time.time
>>> time.time = org_time
