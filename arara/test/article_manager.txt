load LoginManager & MemberManager

>>> import arara.model
>>> arara.model.init_test_database()
>>> import arara
>>> server = arara.get_namespace()

# Login as SYSOP and create 'garbage' board

>>> ret, session_key_sysop = server.login_manager.login('SYSOP', 'SYSOP', '123.123.123.123')
>>> ret
True

>>> server.board_manager.add_board(session_key_sysop, 'garbages', 'Garbage Board')
(True, 'OK')

# Register one user, combacsa.

>>> user_reg_dic = {'username':u'combacsa', 'password':u'combacsa', 'nickname':u'combacsa', 'email':u'combacsa', 'signature':u'combacsa', 'self_introduction':u'combacsa', 'default_language':u'english' }
>>> ret, register_key = server.member_manager.register(user_reg_dic)
>>> ret
True
>>> server.member_manager.confirm(u'combacsa', register_key)
(True, 'OK')
>>> ret, session_key_combacsa = server.login_manager.login('combacsa', 'combacsa', '143.248.234.140')
>>> ret
True

# Register one user, mikkang

>>> user_reg_dic = {'username':u'mikkang', 'password':u'mikkang', 'nickname':u'mikkang', 'email':u'mikkang', 'signature':u'mikkang', 'self_introduction':u'mikkang', 'default_language':u'english' }
>>> ret, register_key = server.member_manager.register(user_reg_dic)
>>> ret
True
>>> server.member_manager.confirm(u'mikkang', register_key)
(True, 'OK')
>>> ret, session_key = server.login_manager.login('mikkang', 'mikkang', '143.248.234.140')
>>> ret
True

# Register one user, serialx

>>> user_reg_dic = {'username':u'serialx', 'password':u'serialx', 'nickname':u'serialx', 'email':u'serialx', 'signature':u'serialx', 'self_introduction':u'serialx', 'default_language':u'english' }
>>> ret, register_key = server.member_manager.register(user_reg_dic)
>>> ret
True
>>> server.member_manager.confirm('serialx', register_key)
(True, 'OK')
>>> ret, session_key_serialx = server.login_manager.login('serialx', 'serialx', '143.248.234.140')
>>> ret
True

# Faking time.time (to check time field)

>>> import time
>>> def stub_time():
...     return 1.1
>>> org_time = time.time
>>> time.time = stub_time

# now Testing Article Manager!

>>> server.article_manager.board_list(session_key)
(True, [{'board_name': u'garbages', 'board_description': u'Garbage Board'}])

# Write an article

>>> article_dic = {'title': u'serialx is...', 'content': u'polarbear'}
>>> server.article_manager.write_article(session_key, u'garbages', article_dic)
(True, 1)

# Read the article

>>> server.article_manager.read(session_key, 'garbages', 1)
(True, [{'root_id': 1, 'author_username': u'mikkang', 'hit': 1, 'blacklisted': False, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'polarbear', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 1}])

# Reply to the article

>>> reply_dic = {'title':u'dummy', 'content': u'asdf'}
>>> server.article_manager.write_reply(session_key, 'garbages', 24, reply_dic)
(False, 'ARTICLE_NOT_EXIST')
>>> server.article_manager.write_reply(session_key, 'garbages', 1, reply_dic)
(True, 2)

# Read the article again

>>> server.article_manager.read(session_key, 'garbages', 1)
(True, [{'root_id': 1, 'author_username': u'mikkang', 'hit': 2, 'blacklisted': False, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'polarbear', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 1}, {'root_id': 1, 'author_username': u'mikkang', 'hit': 0, 'blacklisted': False, 'title': u'dummy', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'asdf', 'vote': 0, 'depth': 2, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 2}])

# List the article (should only be one article in the list

>>> server.article_manager.article_list(session_key, 'garbages')
(True, [{'author_username': u'mikkang', 'hit': 2, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'reply_count': 1, 'vote': 0, 'id': 1}, {'last_page': 1}])


# Test for pagination

>>> for i in range(100):
...     article_dic = {u'title': u'serialx is... ' + unicode(i), u'content': u'polarbear'}
...     _ = server.article_manager.write_article(session_key, u'garbages', article_dic)
>>> ret, l = server.article_manager.article_list(session_key, u'garbages')
>>> len(l)
21
>>> l[0]['title']
u'serialx is... 99'
>>> l[1]['title']
u'serialx is... 98'
>>> l[19]['title']
u'serialx is... 80'

>>> ret, l = server.article_manager.article_list(session_key, 'garbages', page=2)
>>> len(l)
21
>>> l[20]
{'last_page': 6}

# Test for deletion

>>> server.article_manager.delete(session_key, 'garbages', 3)
(True, 3)
>>> server.article_manager.read(session_key, 'garbages', 3)
(True, [{'root_id': 3, 'author_username': u'mikkang', 'hit': 1, 'blacklisted': False, 'title': u'serialx is... 0', 'deleted': True, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'polarbear', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 3}])
>>> server.article_manager.delete(session_key, 'garbages', 1241252)
(False, 'ARTICLE_NOT_EXIST')
>>> server.article_manager.delete(session_key_serialx, 'garbages', 2)
(False, 'NO_PERMISSION')


# Test for modification

>>> server.article_manager.read(session_key, 'garbages', 1)
(True, [{'root_id': 1, 'author_username': u'mikkang', 'hit': 3, 'blacklisted': False, 'title': u'serialx is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'polarbear', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 1}, {'root_id': 1, 'author_username': u'mikkang', 'hit': 0, 'blacklisted': False, 'title': u'dummy', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'asdf', 'vote': 0, 'depth': 2, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 2}])
>>> article_dic = {'title': 'pipoket is...', 'content': 'woodori'}
>>> server.article_manager.modify(session_key, 'garbages', 1, article_dic)
(True, 1)
>>> server.article_manager.read(session_key, 'garbages', 1)
(True, [{'root_id': 1, 'author_username': u'mikkang', 'hit': 4, 'blacklisted': False, 'title': u'pipoket is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'woodori', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 1}, {'root_id': 1, 'author_username': u'mikkang', 'hit': 0, 'blacklisted': False, 'title': u'dummy', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'asdf', 'vote': 0, 'depth': 2, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 2}])


# Board list

>>> server.article_manager.board_list(session_key)
(True, [{'board_name': u'garbages', 'board_description': u'Garbage Board'}])


# Write an article with many replies

>>> article_dic = {'title': 'woodori is...', 'content': 'KIN'}
>>> ret, article_id = server.article_manager.write_article(session_key, 'garbages', article_dic)

# Reply to the article

>>> reply_dic = {'title':'dummy', 'content': 'asdf'}
>>> ret, article_reply_id = server.article_manager.write_reply(session_key, 'garbages', article_id, reply_dic)
>>> ret, article_reply_id = server.article_manager.write_reply(session_key, 'garbages', article_reply_id, reply_dic)
>>> ret, article_reply_id = server.article_manager.write_reply(session_key, 'garbages', article_reply_id, reply_dic)
>>> ret, article_reply_id = server.article_manager.write_reply(session_key, 'garbages', article_reply_id, reply_dic)

# Read the article

>>> ret, article = server.article_manager.read(session_key, 'garbages', article_id)
>>> article[0]['root_id'] == article_id
True
>>> article[1]['root_id'] == article_id
True
>>> article[2]['root_id'] == article_id
True
>>> article[3]['root_id'] == article_id
True
>>> article[4]['root_id'] == article_id
True

# adding blacklist to test blacklist function

>>> server.blacklist_manager.add(session_key, 'serialx')
(True, 'OK')

# Testing blacklist function

>>> article_dic = {'title': 'woodori is...', 'content': 'KIN'}
>>> ret, article_id = server.article_manager.write_article(session_key_serialx, 'garbages', article_dic)

>>> server.article_manager.read(session_key, 'garbages', article_id)
(True, [{'root_id': 108, 'author_username': u'serialx', 'hit': 1, 'blacklisted': True, 'title': u'woodori is...', 'deleted': False, 'last_modified_date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'content': u'KIN', 'vote': 0, 'depth': 1, 'date': datetime.datetime(1970, 1, 1, 9, 0, 1, 100000), 'id': 108}])

# delete polarbear from blacklist

>>> server.blacklist_manager.delete(session_key, 'serialx')
(True, 'OK')

>>> server.login_manager.logout(session_key)
(True, 'OK')

Fin!

>>> time.time = org_time

# Reset the database
>>> import arara.model
>>> arara.model.clear_test_database()
